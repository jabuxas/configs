// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            layout "us"
            variant "intl"
            options "ctrl:nocaps"
        }
        numlock
    }

    touchpad {
        tap
        dwt
        dwtp
        drag-lock
    }

    mouse {
        accel-speed 0.65
        accel-profile "flat"
    }
    warp-mouse-to-focus
    focus-follows-mouse max-scroll-amount="10%"
}

output "eDP-1" {
    mode "1920x1080@144"
    position x=0 y=0
    variable-refresh-rate on-demand=true
    
    // layout {
    //     always-center-single-column
    // }
}

output "HDMI-A-1" {
    mode "2560x1080@74.991"
    focus-at-startup
    position x=1920 y=0

    // hot-corners {
    //     off
    // }
}

layout {
    gaps 8

    preset-column-widths {
        proportion 1.0
        proportion 0.66667
        proportion 0.33333
    }

    default-column-width { proportion 0.5; }

    focus-ring {
        active-gradient from="#81a1c1" to="#e5e9f0" angle=45
        urgent-color "#991b1b"
        width 3
    }

    border {
        off
    }

    shadow {
        on

        // draw-behind-window true

        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    struts {
        left 10
        right 10
        // top 20
        // bottom 20
    }

    insert-hint {
        // off
        color "#ffc87f80"
        gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
    }
}


// spawn-at-startup "waybar -c ~/.config/waybar/modern.jsonc -s ~/.config/waybar/modern.css"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "gsettings" "set" "org.gnome.desktop.interface" "gtk-theme" "Materia-dark-compact"
spawn-at-startup "gsettings" "set" "org.gnome.desktop.interface" "icon-theme" "Reversal-black-dark"
spawn-at-startup "gsettings" "set" "org.gnome.desktop.interface" "cursor-theme" "Simp1e-Adw"
spawn-at-startup "gsettings" "set" "org.gnome.desktop.interface" "font-name" "Terminess Nerd Font 12"
spawn-at-startup "dbus-update-activation-environment" "--systemd" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP=niri" "DISPLAY"
spawn-at-startup "lxqt-policykit-agent"
spawn-at-startup "swaync"
spawn-at-startup "gammastep" "-t" "4500:3500" "-l" "-23.5475:-46.63611" "-b" "1.0:0.8"
spawn-at-startup "alacritty" "-e" "tmux"
spawn-at-startup "/opt/youtube-music/youtube-music" "--ozone-platform-hint=auto"
spawn-at-startup "firefox-bin"
spawn-at-startup "flatpak" "run" "com.mattermost.Desktop"
spawn-at-startup "flatpak" "run" "com.bitwarden.desktop"
spawn-at-startup "rm" "-rf" "~/tmp/*"
spawn-at-startup "hypridle"
spawn-at-startup "~/scripts/swww.sh"
spawn-at-startup "~/scripts/senpai.sh"
spawn-at-startup "emacs"
spawn-at-startup "sudo" "nvidia-smi" "-lgc" "646,1785"

environment {
    QT_QPA_PLATFORM "wayland"
    DISPLAY ":0"
    XDG_CURRENT_DESKTOP "niri"
}

cursor {
    xcursor-theme "Simp1e-Adw"
    xcursor-size 24
    hide-when-typing
    hide-after-inactive-ms 5000
}

overview {
    zoom 0.75
}

// xwayland-satellite {}

hotkey-overlay {
    skip-at-startup
}

prefer-no-csd
screenshot-path null

animations {
    // off
    slowdown 1.0
}

workspace "browser" {
    open-on-output "eDP-1"
}

workspace "chat" {
    open-on-output "eDP-1"
}

workspace "code" {
    open-on-output "HDMI-A-1"
}

workspace "music" {
    open-on-output "eDP-1"
}


window-rule {
    match at-startup=true app-id=r#"youtube_music$"#
    open-maximized true
    open-on-workspace "music"
    default-column-width { proportion 1.0; }
}

window-rule {
    match at-startup=true app-id="Mattermost"
    open-maximized true
    open-on-workspace "chat"
    default-column-width { proportion 1.0; }
}

window-rule {
    match at-startup=true app-id=r#"firefox$"#
    open-maximized true
    open-on-workspace "browser"
    default-column-width { proportion 1.0; }
}

window-rule {
    match app-id=r#"emacs$"#
    match at-startup=true app-id=r#"Alacritty$"#
    open-maximized true
    open-on-workspace "code"
    default-column-width { proportion 1.0; }
}

window-rule {
    match app-id=r#"steam_app.*"#
    match app-id=r#".*\.exe"#
    open-maximized true
    variable-refresh-rate true
    default-column-width { proportion 1.0; }
}

window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

window-rule {
    match is-window-cast-target=true

    focus-ring {
        off
    }

    border {
        on
        inactive-color "#7d0d2d"
    }

    tab-indicator {
        active-color "#f38ba8"
        inactive-color "#7d0d2d"
    }
}


// this is actually so useful.
window-rule {
    match app-id=r#"Bitwarden"#
    block-out-from "screen-capture"
}

layer-rule {
    match namespace="swaync-notification-window"
    block-out-from "screencast"
}

window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}

binds {
    Mod+Return hotkey-overlay-title="Open a Terminal: alacritty" { spawn "alacritty"; }
    Mod+Shift+Return hotkey-overlay-title="Run an Application: fuzzel" { spawn "fuzzel"; }
    Super+Control+L hotkey-overlay-title="Lock the Screen: hyprlock" { spawn "hyprlock"; }

    Mod+B { spawn "firefox-bin"; }
    Mod+Control+E { spawn "emacs"; }
    Mod+E { spawn "pcmanfm"; }
    Mod+U { spawn "fish" "-c" "heaven"; }
    Mod+F12 { spawn "~/scripts/fuzzel-bluetooth.sh"; }


    // You can also use a shell. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument in the end.
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }
    Mod+Tab { spawn "swaync-client" "-t"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    Mod+F10 allow-when-locked=true { spawn "brightnessctl" "set" "5%+"; }
    Mod+F9 allow-when-locked=true  { spawn "brightnessctl" "set" "5%-"; }


    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    // You can also move the mouse into the top-left hot corner,
    // or do a four-finger swipe up on a touchpad.
    Mod+O repeat=false { toggle-overview; }

    Mod+Shift+C { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+L     { focus-column-right; }
    // Mod+J     { focus-window-down; }
    // Mod+K     { focus-window-up; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    Mod+J     { focus-window-or-workspace-down; }
    Mod+K     { focus-window-or-workspace-up; }
    Mod+Shift+J     { move-window-down-or-to-workspace-down; }
    Mod+Shift+K     { move-window-up-or-to-workspace-up; }
    Mod+Shift+L     { move-column-right; }
    Mod+Shift+H     { move-column-left; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+Comma { move-column-to-monitor-left; }
    Mod+Shift+Period { move-column-to-monitor-right; }
    Mod+Shift+Control+Comma { move-workspace-to-monitor-left; }
    Mod+Shift+Control+Period { move-workspace-to-monitor-right; }
    Mod+Comma     { focus-monitor-left; }
    Mod+Period     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+A { consume-window-into-column; }
    Mod+D { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Alt+Shift+F { toggle-windowed-fullscreen; }
    Alt+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+T       { toggle-window-floating; }
    Mod+Shift+T { switch-focus-between-floating-and-tiling; }

    Mod+W { toggle-column-tabbed-display; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    // Print { screenshot; }
    // Ctrl+Print { screenshot-screen; }
    // Alt+Print { screenshot-window; }

    Print { spawn "~/scripts/way-print.sh" "p"; }
    Shift+Print { spawn "~/scripts/way-print.sh" "s"; }
    Mod+Print { spawn "~/scripts/way-print.sh" "t"; }
    Control+Shift+Print { spawn "~/scripts/way-print.sh" "m"; }
    Control+Print { spawn "~/scripts/way-print.sh" "cw"; }

    Menu { spawn "~/scripts/way-print.sh" "p"; }
    Shift+Menu { spawn "~/scripts/way-print.sh" "s"; }
    Mod+Menu { spawn "~/scripts/way-print.sh" "t"; }
    Control+Shift+Menu { spawn "~/scripts/way-print.sh" "m"; }
    Control+Menu { spawn "~/scripts/way-print.sh" "cw"; }


    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+Q { quit; }
    Ctrl+Alt+Delete { quit; }

    Mod+Shift+P { power-off-monitors; }
}
